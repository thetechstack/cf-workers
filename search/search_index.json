{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cloudflare Workers \u4e2d\u6587\u6587\u6863 \u00b6 Cloudflare Workers \u63d0\u4f9b\u4e86\u4e00\u4e2a \u65e0\u670d\u52a1\u5668 \u6267\u884c\u73af\u5883\uff0c \u5141\u8bb8\u60a8\u521b\u5efa\u5168\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u6269\u5145\u73b0\u6709\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u65e0\u9700\u914d\u7f6e\u6216\u7ef4\u62a4\u57fa\u7840\u67b6\u6784\u3002","title":"\u9996\u9875"},{"location":"#cloudflare-workers","text":"Cloudflare Workers \u63d0\u4f9b\u4e86\u4e00\u4e2a \u65e0\u670d\u52a1\u5668 \u6267\u884c\u73af\u5883\uff0c \u5141\u8bb8\u60a8\u521b\u5efa\u5168\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u6269\u5145\u73b0\u6709\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u65e0\u9700\u914d\u7f6e\u6216\u7ef4\u62a4\u57fa\u7840\u67b6\u6784\u3002","title":"Cloudflare Workers \u4e2d\u6587\u6587\u6863"},{"location":"examples/fetch-html/","text":"\u8bf7\u6c42\u5916\u90e8HTML \u00b6 \u5411\u8fdc\u7a0b\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u54cd\u5e94\u4e2d\u8bfb\u53d6 HTML\uff0c\u7136\u540e\u8fd4\u56de\u8be5 HTML\u3002 /** * Example someHost at URL is set up to respond with HTML * Replace URL with the host you wish to send requests to */ const someHost = 'https://examples.cloudflareworkers.com/demos' ; const url = someHost + '/static/html' ; /** * gatherResponse awaits and returns a response body as a string. * Use await gatherResponse(..) in an async function to get the response body * @param {Response} response */ async function gatherResponse ( response ) { const { headers } = response ; const contentType = headers . get ( 'content-type' ) || '' ; if ( contentType . includes ( 'application/json' )) { return JSON . stringify ( await response . json ()); } else if ( contentType . includes ( 'application/text' )) { return response . text (); } else if ( contentType . includes ( 'text/html' )) { return response . text (); } else { return response . text (); } } async function handleRequest () { const init = { headers : { 'content-type' : 'text/html;charset=UTF-8' , }, }; const response = await fetch ( url , init ); const results = await gatherResponse ( response ); return new Response ( results , init ); } addEventListener ( 'fetch' , event => { return event . respondWith ( handleRequest ()); });","title":"\u8bf7\u6c42\u5916\u90e8HTML"},{"location":"examples/fetch-html/#html","text":"\u5411\u8fdc\u7a0b\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\uff0c\u4ece\u54cd\u5e94\u4e2d\u8bfb\u53d6 HTML\uff0c\u7136\u540e\u8fd4\u56de\u8be5 HTML\u3002 /** * Example someHost at URL is set up to respond with HTML * Replace URL with the host you wish to send requests to */ const someHost = 'https://examples.cloudflareworkers.com/demos' ; const url = someHost + '/static/html' ; /** * gatherResponse awaits and returns a response body as a string. * Use await gatherResponse(..) in an async function to get the response body * @param {Response} response */ async function gatherResponse ( response ) { const { headers } = response ; const contentType = headers . get ( 'content-type' ) || '' ; if ( contentType . includes ( 'application/json' )) { return JSON . stringify ( await response . json ()); } else if ( contentType . includes ( 'application/text' )) { return response . text (); } else if ( contentType . includes ( 'text/html' )) { return response . text (); } else { return response . text (); } } async function handleRequest () { const init = { headers : { 'content-type' : 'text/html;charset=UTF-8' , }, }; const response = await fetch ( url , init ); const results = await gatherResponse ( response ); return new Response ( results , init ); } addEventListener ( 'fetch' , event => { return event . respondWith ( handleRequest ()); });","title":"\u8bf7\u6c42\u5916\u90e8HTML"},{"location":"examples/fetch-json/","text":"\u8bf7\u6c42\u5916\u90e8JSON \u00b6 \u53d1\u9001 GET \u8bf7\u6c42\u5e76\u4ece\u54cd\u5e94\u4e2d\u8bfb\u53d6 JSON\u3002\u7528\u4e8e\u83b7\u53d6\u5916\u90e8\u6570\u636e\u3002 /** * Example someHost is set up to take in a JSON request * Replace url with the host you wish to send requests to * @param {string} someHost the host to send the request to * @param {string} url the URL to send the request to */ const someHost = 'https://examples.cloudflareworkers.com/demos' ; const url = someHost + '/static/json' ; /** * gatherResponse awaits and returns a response body as a string. * Use await gatherResponse(..) in an async function to get the response body * @param {Response} response */ async function gatherResponse ( response ) { const { headers } = response ; const contentType = headers . get ( 'content-type' ) || '' ; if ( contentType . includes ( 'application/json' )) { return JSON . stringify ( await response . json ()); } else if ( contentType . includes ( 'application/text' )) { return response . text (); } else if ( contentType . includes ( 'text/html' )) { return response . text (); } else { return response . text (); } } async function handleRequest () { const init = { headers : { 'content-type' : 'application/json;charset=UTF-8' , }, }; const response = await fetch ( url , init ); const results = await gatherResponse ( response ); return new Response ( results , init ); } addEventListener ( 'fetch' , event => { return event . respondWith ( handleRequest ()); });","title":"\u8bf7\u6c42\u5916\u90e8JSON"},{"location":"examples/fetch-json/#json","text":"\u53d1\u9001 GET \u8bf7\u6c42\u5e76\u4ece\u54cd\u5e94\u4e2d\u8bfb\u53d6 JSON\u3002\u7528\u4e8e\u83b7\u53d6\u5916\u90e8\u6570\u636e\u3002 /** * Example someHost is set up to take in a JSON request * Replace url with the host you wish to send requests to * @param {string} someHost the host to send the request to * @param {string} url the URL to send the request to */ const someHost = 'https://examples.cloudflareworkers.com/demos' ; const url = someHost + '/static/json' ; /** * gatherResponse awaits and returns a response body as a string. * Use await gatherResponse(..) in an async function to get the response body * @param {Response} response */ async function gatherResponse ( response ) { const { headers } = response ; const contentType = headers . get ( 'content-type' ) || '' ; if ( contentType . includes ( 'application/json' )) { return JSON . stringify ( await response . json ()); } else if ( contentType . includes ( 'application/text' )) { return response . text (); } else if ( contentType . includes ( 'text/html' )) { return response . text (); } else { return response . text (); } } async function handleRequest () { const init = { headers : { 'content-type' : 'application/json;charset=UTF-8' , }, }; const response = await fetch ( url , init ); const results = await gatherResponse ( response ); return new Response ( results , init ); } addEventListener ( 'fetch' , event => { return event . respondWith ( handleRequest ()); });","title":"\u8bf7\u6c42\u5916\u90e8JSON"},{"location":"examples/hot-link-protection/","text":"\u653e\u76d7\u94fe \u00b6 \u963b\u6b62\u5176\u4ed6\u7f51\u7ad9\u94fe\u63a5\u5230\u60a8\u7684\u5185\u5bb9\u3002\u8fd9\u5bf9\u4e8e\u4fdd\u62a4\u56fe\u50cf\u5f88\u6709\u7528\u3002 const HOMEPAGE_URL = 'https://tutorial.cloudflareworkers.com/' ; const PROTECTED_TYPE = 'image/' ; async function handleRequest ( request ) { // Fetch the original request const response = await fetch ( request ); // If it's an image, engage hotlink protection based on the // Referer header. const referer = request . headers . get ( 'Referer' ); const contentType = response . headers . get ( 'Content-Type' ) || '' ; if ( referer && contentType . startsWith ( PROTECTED_TYPE )) { // If the hostnames don't match, it's a hotlink if ( new URL ( referer ). hostname !== new URL ( request . url ). hostname ) { // Redirect the user to your website return Response . redirect ( HOMEPAGE_URL , 302 ); } } // Everything is fine, return the response normally. return response ; } addEventListener ( 'fetch' , event => { event . respondWith ( handleRequest ( event . request )); });","title":"\u9632\u76d7\u94fe"},{"location":"examples/hot-link-protection/#_1","text":"\u963b\u6b62\u5176\u4ed6\u7f51\u7ad9\u94fe\u63a5\u5230\u60a8\u7684\u5185\u5bb9\u3002\u8fd9\u5bf9\u4e8e\u4fdd\u62a4\u56fe\u50cf\u5f88\u6709\u7528\u3002 const HOMEPAGE_URL = 'https://tutorial.cloudflareworkers.com/' ; const PROTECTED_TYPE = 'image/' ; async function handleRequest ( request ) { // Fetch the original request const response = await fetch ( request ); // If it's an image, engage hotlink protection based on the // Referer header. const referer = request . headers . get ( 'Referer' ); const contentType = response . headers . get ( 'Content-Type' ) || '' ; if ( referer && contentType . startsWith ( PROTECTED_TYPE )) { // If the hostnames don't match, it's a hotlink if ( new URL ( referer ). hostname !== new URL ( request . url ). hostname ) { // Redirect the user to your website return Response . redirect ( HOMEPAGE_URL , 302 ); } } // Everything is fine, return the response normally. return response ; } addEventListener ( 'fetch' , event => { event . respondWith ( handleRequest ( event . request )); });","title":"\u653e\u76d7\u94fe"},{"location":"examples/redirects/","text":"\u91cd\u5b9a\u5411 \u00b6 \u5c06\u8bf7\u6c42\u4ece\u4e00\u4e2a URL \u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u4e2a URL\uff0c\u6216\u4ece\u4e00\u7ec4 URL \u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u7ec4\u3002 \u5c06\u6240\u6709\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a URL \u00b6 const destinationURL = 'https://example.com' ; const statusCode = 301 ; async function handleRequest ( request ) { return Response . redirect ( destinationURL , statusCode ); } addEventListener ( 'fetch' , async event => { event . respondWith ( handleRequest ( event . request )); }); \u5c06\u8bf7\u6c42\u4ece\u4e00\u4e2a\u57df\u540d\u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u4e2a\u57df\u540d \u00b6 const base = 'https://example.com' ; const statusCode = 301 ; async function handleRequest ( request ) { const url = new URL ( request . url ); const { pathname , search } = url ; const destinationURL = base + pathname + search ; return Response . redirect ( destinationURL , statusCode ); } addEventListener ( 'fetch' , async event => { event . respondWith ( handleRequest ( event . request )); });","title":"\u91cd\u5b9a\u5411"},{"location":"examples/redirects/#_1","text":"\u5c06\u8bf7\u6c42\u4ece\u4e00\u4e2a URL \u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u4e2a URL\uff0c\u6216\u4ece\u4e00\u7ec4 URL \u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u7ec4\u3002","title":"\u91cd\u5b9a\u5411"},{"location":"examples/redirects/#url","text":"const destinationURL = 'https://example.com' ; const statusCode = 301 ; async function handleRequest ( request ) { return Response . redirect ( destinationURL , statusCode ); } addEventListener ( 'fetch' , async event => { event . respondWith ( handleRequest ( event . request )); });","title":"\u5c06\u6240\u6709\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a URL"},{"location":"examples/redirects/#_2","text":"const base = 'https://example.com' ; const statusCode = 301 ; async function handleRequest ( request ) { const url = new URL ( request . url ); const { pathname , search } = url ; const destinationURL = base + pathname + search ; return Response . redirect ( destinationURL , statusCode ); } addEventListener ( 'fetch' , async event => { event . respondWith ( handleRequest ( event . request )); });","title":"\u5c06\u8bf7\u6c42\u4ece\u4e00\u4e2a\u57df\u540d\u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u4e2a\u57df\u540d"},{"location":"examples/respond-with-another-site/","text":"\u8fd4\u56de\u53e6\u4e00\u4e2a\u7ad9\u70b9\u7684\u54cd\u5e94 \u00b6 \u4f7f\u7528\u6765\u81ea\u53e6\u4e00\u4e2a\u7f51\u7ad9\uff08\u672c\u4f8b\u4e2d\u4e3a example.com\uff09\u7684\u54cd\u5e94\u6765\u54cd\u5e94 Worker \u8bf7\u6c42\u3002 addEventListener ( 'fetch' , function ( event ) { event . respondWith ( handleRequest ( event . request )); }); async function handleRequest ( request ) { // Only GET requests work with this proxy. if ( request . method !== 'GET' ) return MethodNotAllowed ( request ); return fetch ( `https://example.com` ); } function MethodNotAllowed ( request ) { return new Response ( `Method ${ request . method } not allowed.` , { status : 405 , headers : { Allow : 'GET' , }, }); }","title":"\u8fd4\u56de\u53e6\u4e00\u4e2a\u7ad9\u70b9\u7684\u54cd\u5e94"},{"location":"examples/respond-with-another-site/#_1","text":"\u4f7f\u7528\u6765\u81ea\u53e6\u4e00\u4e2a\u7f51\u7ad9\uff08\u672c\u4f8b\u4e2d\u4e3a example.com\uff09\u7684\u54cd\u5e94\u6765\u54cd\u5e94 Worker \u8bf7\u6c42\u3002 addEventListener ( 'fetch' , function ( event ) { event . respondWith ( handleRequest ( event . request )); }); async function handleRequest ( request ) { // Only GET requests work with this proxy. if ( request . method !== 'GET' ) return MethodNotAllowed ( request ); return fetch ( `https://example.com` ); } function MethodNotAllowed ( request ) { return new Response ( `Method ${ request . method } not allowed.` , { status : 405 , headers : { Allow : 'GET' , }, }); }","title":"\u8fd4\u56de\u53e6\u4e00\u4e2a\u7ad9\u70b9\u7684\u54cd\u5e94"},{"location":"examples/return-json/","text":"\u8fd4\u56deJSON \u00b6 \u76f4\u63a5\u4ece Worker \u811a\u672c\u8fd4\u56de JSON\uff0c\u5bf9\u4e8e\u6784\u5efa API \u548c\u4e2d\u95f4\u4ef6\u5f88\u6709\u7528\u3002 addEventListener ( 'fetch' , event => { const data = { hello : 'world' , }; const json = JSON . stringify ( data , null , 2 ); return event . respondWith ( new Response ( json , { headers : { 'content-type' : 'application/json;charset=UTF-8' , }, }) ); });","title":"\u8fd4\u56deJSON"},{"location":"examples/return-json/#json","text":"\u76f4\u63a5\u4ece Worker \u811a\u672c\u8fd4\u56de JSON\uff0c\u5bf9\u4e8e\u6784\u5efa API \u548c\u4e2d\u95f4\u4ef6\u5f88\u6709\u7528\u3002 addEventListener ( 'fetch' , event => { const data = { hello : 'world' , }; const json = JSON . stringify ( data , null , 2 ); return event . respondWith ( new Response ( json , { headers : { 'content-type' : 'application/json;charset=UTF-8' , }, }) ); });","title":"\u8fd4\u56deJSON"},{"location":"examples/return-small-html-page/","text":"\u8fd4\u56deHTML\u9875\u9762 \u00b6 \u76f4\u63a5\u5728 Worker \u811a\u672c\u4e2d\u4ece HTML \u5b57\u7b26\u4e32\u6784\u9020 HTML \u9875\u9762\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 const html = `<!DOCTYPE html> <body> <h1>Hello World</h1> <p>This markup was generated by a Cloudflare Worker.</p> </body>` ; async function handleRequest ( request ) { return new Response ( html , { headers : { 'content-type' : 'text/html;charset=UTF-8' , }, }); } addEventListener ( 'fetch' , event => { return event . respondWith ( handleRequest ( event . request )); });","title":"\u8fd4\u56deHTML"},{"location":"examples/return-small-html-page/#html","text":"\u76f4\u63a5\u5728 Worker \u811a\u672c\u4e2d\u4ece HTML \u5b57\u7b26\u4e32\u6784\u9020 HTML \u9875\u9762\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 const html = `<!DOCTYPE html> <body> <h1>Hello World</h1> <p>This markup was generated by a Cloudflare Worker.</p> </body>` ; async function handleRequest ( request ) { return new Response ( html , { headers : { 'content-type' : 'text/html;charset=UTF-8' , }, }); } addEventListener ( 'fetch' , event => { return event . respondWith ( handleRequest ( event . request )); });","title":"\u8fd4\u56deHTML\u9875\u9762"}]}